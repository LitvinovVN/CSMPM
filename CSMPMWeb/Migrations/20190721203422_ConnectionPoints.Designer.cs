// <auto-generated />
using System;
using CSMPMWeb.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSMPMWeb.Migrations
{
    [DbContext(typeof(MySqlDbContext))]
    [Migration("20190721203422_ConnectionPoints")]
    partial class ConnectionPoints
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CSMPMLib.Crop", b =>
                {
                    b.Property<int>("CropId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CropGroupId");

                    b.Property<string>("CropName");

                    b.Property<double>("IrrigationRate");

                    b.Property<double>("WateringRate");

                    b.HasKey("CropId");

                    b.HasIndex("CropGroupId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("CSMPMLib.CropGroup", b =>
                {
                    b.Property<int>("CropGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CropGroupName");

                    b.HasKey("CropGroupId");

                    b.ToTable("CropGroups");
                });

            modelBuilder.Entity("CSMPMLib.IrrigationCanal", b =>
                {
                    b.Property<int>("IrrigationCanalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IrrigationCanalName");

                    b.Property<int>("IrrigationGridId");

                    b.HasKey("IrrigationCanalId");

                    b.HasIndex("IrrigationGridId");

                    b.ToTable("IrrigationCanals");
                });

            modelBuilder.Entity("CSMPMLib.IrrigationCanalConnectionPoint", b =>
                {
                    b.Property<int>("IrrigationCanalConnectionPointId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IrrigationCanalConnectionPointName");

                    b.HasKey("IrrigationCanalConnectionPointId");

                    b.ToTable("IrrigationCanalConnectionPoints");
                });

            modelBuilder.Entity("CSMPMLib.IrrigationCanalConnectionPointToIrrigationCanal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IrrigationCanalConnectionPointId");

                    b.Property<int>("IrrigationCanalConnectionPointTypeId");

                    b.Property<int>("IrrigationCanalId");

                    b.HasKey("Id");

                    b.HasIndex("IrrigationCanalConnectionPointId");

                    b.HasIndex("IrrigationCanalConnectionPointTypeId")
                        .HasName("IX_IrrigationCanalConnectionPointToIrrigationCanals_Irrigation~1");

                    b.HasIndex("IrrigationCanalId")
                        .HasName("IX_IrrigationCanalConnectionPointToIrrigationCanals_Irrigation~2");

                    b.ToTable("IrrigationCanalConnectionPointToIrrigationCanals");
                });

            modelBuilder.Entity("CSMPMLib.IrrigationCanalConnectionPointType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("IrrigationCanalConnectionPointTypes");
                });

            modelBuilder.Entity("CSMPMLib.IrrigationGrid", b =>
                {
                    b.Property<int>("IrrigationGridId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IrrigationGridName");

                    b.Property<int>("IrrigationSystemId");

                    b.HasKey("IrrigationGridId");

                    b.HasIndex("IrrigationSystemId");

                    b.ToTable("IrrigationGrids");
                });

            modelBuilder.Entity("CSMPMLib.IrrigationSystem", b =>
                {
                    b.Property<int>("IrrigationSystemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IrrigationSystemName");

                    b.Property<int>("OrganizationId");

                    b.HasKey("IrrigationSystemId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("IrrigationSystems");
                });

            modelBuilder.Entity("CSMPMLib.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OrganizationName");

                    b.Property<int?>("ParentOrganizationId");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("CSMPMWeb.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Patronymic");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CSMPMLib.Crop", b =>
                {
                    b.HasOne("CSMPMLib.CropGroup", "CropGroup")
                        .WithMany("Crops")
                        .HasForeignKey("CropGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSMPMLib.IrrigationCanal", b =>
                {
                    b.HasOne("CSMPMLib.IrrigationGrid", "IrrigationGrid")
                        .WithMany("IrrigationCanals")
                        .HasForeignKey("IrrigationGridId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSMPMLib.IrrigationCanalConnectionPointToIrrigationCanal", b =>
                {
                    b.HasOne("CSMPMLib.IrrigationCanalConnectionPoint", "IrrigationCanalConnectionPoint")
                        .WithMany("IrrigationCanalConnectionPointToIrrigationCanal")
                        .HasForeignKey("IrrigationCanalConnectionPointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSMPMLib.IrrigationCanalConnectionPointType", "IrrigationCanalConnectionPointType")
                        .WithMany()
                        .HasForeignKey("IrrigationCanalConnectionPointTypeId")
                        .HasConstraintName("FK_IrrigationCanalConnectionPointToIrrigationCanals_Irrigation~1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSMPMLib.IrrigationCanal", "IrrigationCanal")
                        .WithMany()
                        .HasForeignKey("IrrigationCanalId")
                        .HasConstraintName("FK_IrrigationCanalConnectionPointToIrrigationCanals_Irrigation~2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSMPMLib.IrrigationGrid", b =>
                {
                    b.HasOne("CSMPMLib.IrrigationSystem", "IrrigationSystem")
                        .WithMany("IrrigationGrids")
                        .HasForeignKey("IrrigationSystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSMPMLib.IrrigationSystem", b =>
                {
                    b.HasOne("CSMPMLib.Organization", "Organization")
                        .WithMany("IrrigationSystems")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CSMPMWeb.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CSMPMWeb.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSMPMWeb.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CSMPMWeb.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
